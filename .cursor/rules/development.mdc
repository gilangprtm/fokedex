---
description: 
globs: 
alwaysApply: true
---
# Specific Rules for Flutter Pokedex Project

## Project Structure

### Core Structure

- Core Utilities: `lib/core/`
  - Base Classes: `lib/core/base/*`
  - Theme: `lib/core/theme/*`
  - Utilities: `lib/core/utils/*`
  - Services: `lib/core/services/*`
  - Dependency Injection: `lib/core/di/*`
  - Environment Config: `lib/core/env/*`
  - Helper Classes: `lib/core/helper/*`
  - Mahas Components: `lib/core/mahas/*`

### Data Layer

- Data Sources: `lib/data/datasource/`
  - Models: `lib/data/datasource/models/*_model.dart`
  - Local Storage: `lib/data/datasource/local/services/*_service.dart`
  - Network:
    - Repositories: `lib/data/datasource/network/repository/*_repository.dart`
    - Services: `lib/data/datasource/network/service/*_service.dart`
    - Database: `lib/data/datasource/network/db/*`

### Presentation Layer

- Providers: `lib/presentation/providers/*/*_provider.dart`
- Pages: `lib/presentation/pages/*/*_page.dart`
  - Feature-Specific Widgets: `lib/presentation/pages/*/widgets/*_widget.dart`
- Shared Widgets: `lib/presentation/widgets/*_widget.dart`
- Routes: `lib/presentation/routes/*`

## Naming Conventions

### Files

- Use snake_case for all file names
- Add type suffix to files:
  - Models: `*_model.dart`
  - Pages: `*_page.dart`
  - Providers: `*_provider.dart`
  - Services: `*_service.dart`
  - Repositories: `*_repository.dart`
  - Widgets: `*_widget.dart` or `*_tab.dart` for tab components

### Classes

- Use PascalCase for class names
- Add type suffix to class names:
  - Models: `PokemonModel`, `LocationModel`
  - Pages: `PokemonListPage`, `TypeChartPage`
  - Providers: `PokemonDetailProvider`, `LocationListProvider`
  - Services: `PokemonService`, `TypeService`
  - Repositories: `PokemonRepository`, `AbilityRepository`

### Variables and Properties

- Use camelCase for variables and properties
- Prefix private properties with underscore: `_pokemonList`, `_isLoading`
- Use explicit types for declarations
- Use meaningful names that describe purpose, not type

### Methods

- Use camelCase for method names
- Prefix private methods with underscore: `_loadPokemonDetailsFromLocalStorage()`
- Use action verbs to describe what the method does: `loadPokemonList()`, `searchPokemon()`
- Group methods by functionality with comments

## Coding Guidelines

### State Management

- Use the Provider pattern with BaseProvider derivatives
- Implement property-specific notifications with notifyPropertyListeners()
- Use setters for state properties: `_setLoading()`, `_setTypesList()`
- Maintain clean separation between UI and data logic
- Use PropertySelector for efficient UI updates
- Wrap async operations with loading indicators

### API Interactions

- Use Repository classes for API/data access
- Use Service classes for business logic
- Handle exceptions and show meaningful error messages
- Cache responses when appropriate
- Implement pagination for lists

### BaseProvider Usage

- Implement lifecycle methods: `onInit()`, `onReady()`, `onClose()`
- Use `runAsync` for async operations with error handling
- Use property listeners for granular updates
- Batch updates when changing multiple properties
- Log operations with appropriate tags

### UI Patterns

- Use ProviderPage for top-level page components
- Implement loading, error, and empty states for all data-driven UIs
- Extract reusable widgets into separate files
- Use PropertySelector for performance optimization
- Add post-frame callbacks for operations that affect UI

## UI Standards

### Colors

- Use AppColors for all colors, never hardcode color values
- Specific color constants available:
  - Primary/branding: `AppColors.pokemonRed`, `AppColors.pokemonDarkRed`
  - Status colors: `AppColors.errorColor`, `AppColors.successColor`
  - Text colors: `AppColors.lightTextPrimaryColor`, `AppColors.lightTextSecondaryColor`
  - Utility colors: `AppColors.transparent`, `AppColors.white`, `AppColors.black`

### Typography

- Use AppTypography for all text styles
- Available text styles include:
  - `AppTypography.headline6` - For section titles
  - `AppTypography.bodyText2` - For regular text
  - `AppTypography.caption` - For small labels

### Spacing

- Use consistent spacing throughout the UI
- Apply padding using EdgeInsets constants:
  - Standard padding: `const EdgeInsets.all(16.0)`
  - Horizontal padding: `const EdgeInsets.symmetric(horizontal: 16.0)`

### Components

- Use Mahas widgets when available:
  - `MahasLoader` for loading indicators
  - `MahasButton` for buttons
  - `MahasPillTabBar` for tab bars

## Workflow Guidelines

### Development Process

1. Analyze existing components before creating new ones
2. Follow existing patterns for similar features
3. Maintain separation between data, business logic, and UI
4. Use PropertySelector for optimized UI updates
5. Keep provider methods focused on a single responsibility
6. Test with both online and offline scenarios

### Error Handling

1. Add loading states to all async operations
2. Show meaningful error messages to users
3. Log errors with appropriate context
4. Provide retry options for network errors
5. Cache data when possible to improve offline experience

## Lessons

# Add project-specific fixes here as you encounter them

- Use WidgetsBinding.instance.addPostFrameCallback for state changes during initialization
- Handle case-insensitive string comparisons for type filtering
- Set \_isLoading true at start of operations and false in finally blocks
- Use PropertySelector for performance-critical UI elements
- Precompute data that would require state changes during build phase
